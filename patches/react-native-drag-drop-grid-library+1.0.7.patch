diff --git a/node_modules/react-native-drag-drop-grid-library/built/dragDropGrid.js b/node_modules/react-native-drag-drop-grid-library/built/dragDropGrid.js
index 1d032f5..75d3b9d 100644
--- a/node_modules/react-native-drag-drop-grid-library/built/dragDropGrid.js
+++ b/node_modules/react-native-drag-drop-grid-library/built/dragDropGrid.js
@@ -127,18 +127,21 @@ var DragDropGrid = /** @class */ (function (_super) {
                                                 react_native_1.Animated.spring(bp[mergeBlock].pop, {
                                                     toValue: 0,
                                                     tension: 40,
-                                                    friction: 3
+                                                    friction: 3,
+                                                    useNativeDriver: false
                                                 }).start();
                                             }
                                             arr1.push(react_native_1.Animated.spring(bp[activeBlock].hoverPop, {
                                                 toValue: -1,
                                                 tension: 40,
-                                                friction: 3
+                                                friction: 3,
+                                                useNativeDriver: false
                                             }));
                                             arr1.push(react_native_1.Animated.spring(bp[closest_1].pop, {
                                                 toValue: -1,
                                                 tension: 40,
-                                                friction: 3
+                                                friction: 3,
+                                                useNativeDriver: false
                                             }));
                                             react_native_1.Animated.parallel(arr1).start();
                                         }
@@ -183,7 +186,8 @@ var DragDropGrid = /** @class */ (function (_super) {
                                 });
                             arr.push(react_native_1.Animated.timing(bp[pos].currentPosition, {
                                 toValue: bp[toPos].origin,
-                                duration: _this.props.blockTransitionDuration
+                                duration: _this.props.blockTransitionDuration,
+                                useNativeDriver: false
                             }));
                         };
                         //repostion animation for the blocks which are supposed to be repositioned (zig zag animation)
@@ -194,12 +198,14 @@ var DragDropGrid = /** @class */ (function (_super) {
                             arr.push(react_native_1.Animated.spring(bp[mergeBlock].pop, {
                                 toValue: 0,
                                 tension: 40,
-                                friction: 3
+                                friction: 3,
+                                useNativeDriver: false
                             }));
                             arr.push(react_native_1.Animated.spring(bp[activeBlock].hoverPop, {
                                 toValue: 1,
                                 tension: 40,
-                                friction: 3
+                                friction: 3,
+                                useNativeDriver: false
                             }));
                         }
                         //this part repositions all the blocks saves their respected positions and offesets
@@ -245,14 +251,16 @@ var DragDropGrid = /** @class */ (function (_super) {
             return new Promise(function (resolve, reject) {
                 react_native_1.Animated.timing(_this.state.deleteBlockOpacity, {
                     toValue: 0,
-                    duration: 2 * _this.props.activeBlockCenteringDuration
+                    duration: 2 * _this.props.activeBlockCenteringDuration,
+                    useNativeDriver: false
                 }).start(resolve);
             });
         };
         _this.animateBlockMove = function (blockIndex, position) {
             return react_native_1.Animated.timing(_this._getBlock(blockIndex).currentPosition, {
                 toValue: position,
-                duration: _this.props.blockTransitionDuration
+                duration: _this.props.blockTransitionDuration,
+                useNativeDriver: false
             });
         };
         _this.returnBlockToOriginalPosition = function () {
@@ -261,7 +269,8 @@ var DragDropGrid = /** @class */ (function (_super) {
                 react_native_1.Animated.spring(_this.blockPositions[_this.state.mergeBlock].pop, {
                     toValue: 0,
                     tension: 40,
-                    friction: 3
+                    friction: 3,
+                    useNativeDriver: false
                 }).start();
             }
             _this.repostionBlocks();
@@ -470,7 +479,8 @@ var DragDropGrid = /** @class */ (function (_super) {
             else if (_this.state.gridHeight._value !== _this.gridHeightTarget) {
                 react_native_1.Animated.timing(_this.state.gridHeight, {
                     toValue: _this.gridHeightTarget,
-                    duration: _this.props.blockTransitionDuration
+                    duration: _this.props.blockTransitionDuration,
+                    useNativeDriver: false
                 }).start();
             }
         };
@@ -485,7 +495,8 @@ var DragDropGrid = /** @class */ (function (_super) {
                 react_native_1.Animated.spring(activeBlock.hoverPop, {
                     toValue: 1,
                     friction: 3,
-                    tension: 40
+                    tension: 40,
+                    useNativeDriver: false
                 }).start(function () { });
             }
         };
@@ -666,7 +677,8 @@ var DragDropGrid = /** @class */ (function (_super) {
         for (var i = 0; i < bp.length; i++) {
             react_native_1.Animated.timing(bp[i].currentPosition, {
                 toValue: bp[i].origin,
-                duration: this.props.activeBlockCenteringDuration
+                duration: this.props.activeBlockCenteringDuration,
+                useNativeDriver: false
             }).start();
         }
     };
@@ -688,7 +700,8 @@ var DragDropGrid = /** @class */ (function (_super) {
                 react_native_1.Animated.spring(bp[mergeBlock].pop, {
                     toValue: 0,
                     tension: 40,
-                    friction: 3
+                    friction: 3,
+                    useNativeDriver: false
                 }).start();
             }
         }
@@ -701,12 +714,14 @@ var DragDropGrid = /** @class */ (function (_super) {
         hoverPopOfItem.stopAnimation();
         react_native_1.Animated.timing(activeBlockCurrentPosition, {
             toValue: toValueAnim,
-            duration: this.props.activeBlockCenteringDuration
+            duration: this.props.activeBlockCenteringDuration,
+            useNativeDriver: false
         }).start();
         react_native_1.Animated.spring(hoverPopOfItem, {
             toValue: 0,
             tension: 40,
-            friction: 3
+            friction: 3,
+            useNativeDriver: false
         }).start();
     };
     DragDropGrid.prototype.assessGridSize = function (_a) {
diff --git a/node_modules/react-native-drag-drop-grid-library/dragDropGrid.tsx b/node_modules/react-native-drag-drop-grid-library/dragDropGrid.tsx
index 2b6dc37..f6933d2 100644
--- a/node_modules/react-native-drag-drop-grid-library/dragDropGrid.tsx
+++ b/node_modules/react-native-drag-drop-grid-library/dragDropGrid.tsx
@@ -283,7 +283,8 @@ export class DragDropGrid extends React.Component<props, state> {
                         Animated.spring(bp[mergeBlock].pop, {
                           toValue: 0,
                           tension: 40,
-                          friction: 3
+                          friction: 3,
+                          useNativeDriver: false
                         }).start();
                       }
                     
@@ -291,14 +292,16 @@ export class DragDropGrid extends React.Component<props, state> {
                         Animated.spring(bp[activeBlock].hoverPop, {
                           toValue: -1,
                           tension: 40,
-                          friction: 3
+                          friction: 3,
+                          useNativeDriver: false
                         })
                       );
                       arr1.push(
                         Animated.spring(bp[closest].pop, {
                           toValue: -1,
                           tension: 40,
-                          friction: 3
+                          friction: 3,
+                          useNativeDriver: false
                         })
                       );
                       Animated.parallel(arr1).start();
@@ -351,7 +354,8 @@ export class DragDropGrid extends React.Component<props, state> {
             arr.push(
               Animated.timing(bp[pos].currentPosition, {
                 toValue: bp[toPos].origin,
-                duration: this.props.blockTransitionDuration
+                duration: this.props.blockTransitionDuration,
+                useNativeDriver: false
               })
             );
           }
@@ -361,14 +365,16 @@ export class DragDropGrid extends React.Component<props, state> {
               Animated.spring(bp[mergeBlock].pop, {
                 toValue: 0,
                 tension: 40,
-                friction: 3
+                friction: 3,
+                useNativeDriver: false
               })
             );
             arr.push(
               Animated.spring(bp[activeBlock].hoverPop, {
                 toValue: 1,
                 tension: 40,
-                friction: 3
+                friction: 3,
+                useNativeDriver: false
               })
             );
           }
@@ -419,7 +425,8 @@ export class DragDropGrid extends React.Component<props, state> {
     return new Promise((resolve, reject) => {
       Animated.timing(this.state.deleteBlockOpacity, {
         toValue: 0,
-        duration: 2 * this.props.activeBlockCenteringDuration
+        duration: 2 * this.props.activeBlockCenteringDuration,
+        useNativeDriver: false
       }).start(resolve);
     });
   };
@@ -427,7 +434,8 @@ export class DragDropGrid extends React.Component<props, state> {
   animateBlockMove = (blockIndex, position) => {
    return Animated.timing(this._getBlock(blockIndex).currentPosition, {
       toValue: position,
-      duration: this.props.blockTransitionDuration
+      duration: this.props.blockTransitionDuration,
+      useNativeDriver: false
     });
   };
 
@@ -437,7 +445,8 @@ export class DragDropGrid extends React.Component<props, state> {
       Animated.spring(this.blockPositions[this.state.mergeBlock].pop, {
         toValue: 0,
         tension: 40,
-        friction: 3
+        friction: 3,
+        useNativeDriver: false
       }).start();
     }
     this.repostionBlocks();
@@ -451,7 +460,8 @@ export class DragDropGrid extends React.Component<props, state> {
     for (let i = 0; i < bp.length; i++) {
       Animated.timing(bp[i].currentPosition, {
         toValue: bp[i].origin,
-        duration: this.props.activeBlockCenteringDuration
+        duration: this.props.activeBlockCenteringDuration,
+        useNativeDriver: false
       }).start();
     }
   }
@@ -473,7 +483,8 @@ export class DragDropGrid extends React.Component<props, state> {
         Animated.spring(bp[mergeBlock].pop, {
           toValue: 0,
           tension: 40,
-          friction: 3
+          friction: 3,
+          useNativeDriver: false
         }).start();
       }
     }
@@ -486,12 +497,14 @@ export class DragDropGrid extends React.Component<props, state> {
     hoverPopOfItem.stopAnimation();
     Animated.timing(activeBlockCurrentPosition, {
       toValue: toValueAnim,
-      duration: this.props.activeBlockCenteringDuration
+      duration: this.props.activeBlockCenteringDuration,
+      useNativeDriver: false
     }).start();
     Animated.spring(hoverPopOfItem, {
       toValue: 0,
       tension: 40,
-      friction: 3
+      friction: 3,
+      useNativeDriver: false
     }).start();
   }
   afterDragRelease = () => {
@@ -786,7 +799,8 @@ export class DragDropGrid extends React.Component<props, state> {
     else if (this.state.gridHeight._value !== this.gridHeightTarget) {
       Animated.timing(this.state.gridHeight, {
         toValue: this.gridHeightTarget,
-        duration: this.props.blockTransitionDuration
+        duration: this.props.blockTransitionDuration,
+        useNativeDriver: false
       }).start();
     }
   };
@@ -803,7 +817,8 @@ export class DragDropGrid extends React.Component<props, state> {
       Animated.spring(activeBlock.hoverPop, {
         toValue: 1,
         friction: 3,
-        tension: 40
+        tension: 40,
+        useNativeDriver: false
       }).start(() => {});
     }
   };
